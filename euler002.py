print """
Problem 2. Even Fibonacci numbers
Each new term in the Fibonacci sequence is generated by adding the previous
two terms. By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not
exceed four million, find the sum of the even-valued terms.
-----------------------------------------------------------------------------

fib series = 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
             F1 F2 F3 F4 F5 F6 F7  F8  F9  F10 F11
                  Even     Even        Even

Each 3 numbers in the series we get an even value, starting at F3: F3, F6, F9..
We can define Fib in terms of Fn-3 and Fn-6, so we take only even numbers while
iterating over the series

Fn = Fn-1 + Fn-2
= Fn-2 + Fn-3 + Fn-3 + Fn-4
= 2Fn-3 + Fn-3 + Fn-4 + Fn-4
= 3Fn-3 + 2Fn-4
= 3Fn-3 + Fn-4 + Fn-5 + Fn-6
= 4Fn-3 + Fn-6       (since Fn-3 = Fn-4 + Fn-5)

"""

def even_fib_sum(max_value):
    # The first even value is 2
    fib3 = 2
    fib6 = 0
    result = fib3
    sum_value = 0
    while result < max_value:
        sum_value = sum_value + result

        # setup for next value in series
        result = 4 * fib3 + fib6
        fib6 = fib3
        fib3 = result
    return sum_value

print "even fibonacci numbers sum, up to 4000000: ", even_fib_sum(4000000)
